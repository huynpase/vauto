==How to extend a module?==
_Note: Vibz Automation framework can be extended in four different directions. [http://code.google.com/p/vauto/wiki/ExtensibleFrameworkConcept Read here]_

This article will explain the process to extend each of these modules.

===Extending Instruction module===
[http://vauto.googlecode.com/files/Ext_Instruction.zip Download Demo Source]

====Types of Instructions====
Framework identifies three types of instructions based on their behavior.
  * *Action*: Actions are instructions which interferes with Application under test (AUT) to do some task. It returns a bool stating whether the instruction failed or passed.
  * *Assert*: Assert instructions does not perform any operation on the AUT. Rather it does some checks and returns a boolean stating whether the check condition passed or failed.
  * *Fetch*: Fetch instruction retrieves some value from the AUT and assigns it to a variable given.
  Based on the type of instruction, a module developer has to follow some specific steps given below.

====About Demo====
The example has a extension project 'demo_ext_instruction' that demonstrates extension to each type of instruction. Along with extended module there is a test project 'test_demo_ext_inst' which shows the usage of the new module.

====Steps====
 * Create a new class library project.
 * Add reference to following Vibz.Contract.dll. [http://vauto.googlecode.com/files/Vibz.Contract.dll.zip Download here]
 * One can define as many instruction in an instruction library project. However, as a best practice, use related instructions basing on target of usage (say instruction dealing with database activity should be bundled in one library package). 
 * For each instruction, define a seperate class. 
 * Add reference to following namespace in your class.
  * System.Xml.Serialization; 
  * Vibz.Contract; 
  * Vibz.Contract.Attribute;
 * Add TypeInfo class attribute before the class begin (shown below). 
{{{
namespace demo_ext_instruction.Calendar
{
    [TypeInfo(Author="Vibzworld", Details = "Changes the system date.",
        Version = "2.0")]
    public class IsDayToday : InstructionBase, IAssert
    {
        bool _assertValue = false;
}}}
  The Studio uses informations stored in TypeInfo to help script writers during scripting. These informations are displayed as context help.
 * All class must inherit '<font color='green'>InstructionBase</font>'. 
 * Steps till now is common to all types of instruction. Now, it's the to decide upon the type of instruction and follow some specific step.
 *

===Extending Macro module===
[http://vauto.googlecode.com/files/Ext_Macro.zip Download Demo Source]

====Types of Macros====
Framework identifies two types of macro based on their behavior.
  * Macro Function:
  * Macro Variable:

====About Demo====
The example has a extension project 'demo_ext_macro' that demonstrates extension to each type of macro. Along with extended module there is a test project 'test_demo_ext_macro' which shows the usage of the new module.

====Steps====
 * Create a new class library project.
 * Add reference to following Vibz.Contract.dll. [http://vauto.googlecode.com/files/Vibz.Contract.dll.zip Download here]
 * to be continued

===Extending External Data module===

===Extending Reports module===